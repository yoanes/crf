<?xml version="1.0" ?>

<project name="wl-crf"
    xmlns:sensis="antlib:au.com.sensis.mobiles">

    <description>Builds the crf-component.</description>

    <!-- Modify the following for local only configuration -->
    <property file="build.properties"/>
    
    <!-- ==================================================================================== -->
    <!-- 
      - Execute rather than import build-boostrap.xml so that it can automatically
      - retrieve bootstrap build scripts if neccessary for the imports below. 
      - TODO: this works but it's inefficient. Imported build scripts use antcontrib:foreach 
      - to execute targets. This causes the entire build script to be reparsed and hence
      - the build-bootstrap.xml script is invoked again each time.
      - include 
      -->
<!--    <ant antfile="build-bootstrap.xml"/>-->
    
    <!-- ==================================================================================== -->
    <!-- Import shared build scripts. --> 
<!--    <import file="shared-build-scripts/src/toplevel/build-component-with-showcase-support.xml" />-->
    <import file="shared-build-scripts/src/toplevel/build-library-with-showcase-support.xml" />
	<import file="shared-build-scripts/src/standard/build-standard-require-jdk5-home-property.xml"/>
	
	<target name="showcase-init" depends="build-showcase-init.showcase-init">
        <echo message="crf: Overriding build-showcase-init.showcase-init target." />
        
		<property name="image.scripts.src.dir" 
		            value="${src.dir}/scripts/image-generation" />
        <property name="image.scripts.dist.path" 
            value="${dist.dir}/${project.name}-image-scripts-${project.version.complete}.zip" />		
        	
        <property name="image.scripts.dist.work.dir" location="${build.dir}/work/image-scripts"/>        	
        	
        <mkdir dir="${image.scripts.dist.work.dir}" />
	
        <!--
          - This project's showcase still depends on MCS, since we provide MCS based web pages for
          - performance testing comparisons.
          -->
        <property file="${showcase.cfg.dir}/mcs/mcs.properties.${project.platform}"/>
	
        <!-- 
          - Webapp context path for the showcase. Default value is what the selenium tests are based on. This "funny" path-
          - was chosen for compatibility with the sandpit-uidev environment, which was historically the only "real"
          - environment we had for testing the showcase.
          -->
	    <property name="showcase.context.path" value="/uidev/crfshowcase"/>
	
	</target>
	
    <target name="prepare-resources-to-publish" depends="build-library-with-showcase-support.prepare-resources-to-publish">
        <echo message="crf: Overriding build-library-with-showcase-support.prepare-resources-to-publish target." />
    	
        <copy todir="${image.scripts.dist.work.dir}" overwrite="true"
              description="Make the build aware of the build version related properties." >
            <fileset dir="${image.scripts.src.dir}">
                <include name="**/*"/>
            </fileset>
            <filterset>
                <filter token="CRFVERSION" value="${project.version.complete}"/>
            </filterset>
        </copy>
      
        <zip destfile="${image.scripts.dist.path}">
            <fileset dir="${image.scripts.dist.work.dir}">
                <include name="**/*"/>
            </fileset>
        </zip>

        <copy file="${image.scripts.dist.path}" 
          tofile="${ivy.publish.dir}/${project.name}-image-scripts-${project.version.complete}.zip"/>
    </target>
	
	
    <!--
      - Override imported target: add extra steps to standard library step. 
      -->
    <target name="prepare-resources-for-jar" depends="build-library-override-prepare-resources-for-jar.prepare-resources-for-jar">
        <echo message="crf: Overriding library prepare-resources-for-jar target to add additional steps." />
            
      	<!-- 
      	  - Extra step for crf since we have tld files, even though we are notionally a "library". 
      	  - TODO: watch out if this library starts to overlap even further with components.
      	  -->
        <copy todir="${jar.dist.work.dir}" overwrite="true"> 
            <fileset id="crf.jar.custom.jsp.tags.fileset" dir="${web.dir}" >
                <include name="**/*.tag"/>
                <include name="**/*.tld"/>
            </fileset>
        </copy>         

        <sensis:log-file-set-size refid="crf.jar.custom.jsp.tags.fileset" basedir="${web.dir}"/>
    </target>   
	
    <!--
      - Override imported target: add extra steps to standard library step. 
      -->
    <target name="showcase-prepare-resources-for-package" 
    	depends="build-showcase-prepare-resources-for-package.showcase-prepare-resources-for-package">
    	
        <echo message="crf: Overriding showcase showcase-prepare-resources-for-package target to add additional steps." />
        	
        <copy file="${showcase.cfg.dir}/mcs/mcs-config.xml" 
               tofile="${dist.showcase.work.dir}/WEB-INF/mcs-config.xml"
                overwrite="true">
            <filterset>
                <filter token="MCS-DEVICEREPOSITORY-FILEPATH"
                        value="${device.repository.path}"/>
                <filter token="MCS-POLICIES-FILEPATH" value="${mcs.policies.filepath}"/>
                <filter token="MCS-CACHE-POLICIES" value="${mcs.cache.policies}"/>
                <filter token="MCS-SCRIPT-ASSET-PATH" value="${mcs.script.asset.path}"/>
            </filterset>
        </copy>
	
	    <!-- CRF -->
        <copy tofile="${showcase.classes.dir}/crf-environment.properties" overwrite="true" 
            file="${showcase.cfg.dir}/crf-environment.properties.${project.platform}" >
            <filterset>
                <filter token="TOMCAT_HOME" value="${tomcat.home}" />
                <filter token="WEBAPP_CONTEXT_PATH" value="${showcase.context.path}" />
            </filterset>
        </copy>

    </target>
	
	<target name="jaxbCompileCrfConfig" depends="init, require-jdk5-home-property"
		description="Compile the crf-config.xsd into JAXB beans.">

        <property name="crf.config.jaxb.targetPackage" value="au.com.sensis.mobile.crf.config.jaxb.generated"/>
        <property name="crf.config.jaxb.destDir" value="${src.java.dir}"/>
        <property name="crf.config.jaxb.schema" 
            value="${cfg.dir}/au/com/sensis/mobile/crf/config/crf-config.xsd"/>
        <path id="crf.config.jaxb.classpath">
            <fileset dir="${jaxb.lib.dir}">
                <include name="*.jar"/>
		   </fileset>
        </path>

        <!--
          - The current version of the xjc task (JAXB RI 2.1.3 - 2.1.9)
          - does not behave well with JDK 1.6: loading of the default-value plugin fails.
          - So we execute the XJCFacade class directly with jdk 1.5.
          -
          - This approach isn't too horrid except for the fact that you have to list every
          - binding file explicitly if it doesn't have a *.xjb extension.
          -->
        <java classname="com.sun.tools.xjc.XJCFacade"
            classpathref="crf.config.jaxb.classpath" fork="true"
            jvm="${jdk5.home}/bin/java"
            failonerror="true">
            <arg value="-p"/>
            <arg value="${crf.config.jaxb.targetPackage}"/>
            <arg value="-d"/>
            <arg value="${crf.config.jaxb.destDir}"/>
            <arg value="-mark-generated"/>
            <arg value="${crf.config.jaxb.schema}"/>
        </java>
    </target>
	
	<target name="run-image-generation-tests" depends="init"
        description="Run (offline) image generation tests">
		
	    <delete dir="${build.dir}/work/image-generation-tests" />
	    <mkdir dir="${build.dir}/work/image-generation-tests" />
	
        <exec executable="chmod" failonerror="true" >
        	<arg value="u+x" />
        	<arg value="test/scripts/image-generation/*.sh" />	
        </exec>		

        <exec executable="bash" 
            failonerror="true" resolveexecutable="true">
		   <arg value="-c" />	
		   <arg value="test/scripts/image-generation/gimagesTestCase.sh" />	
        </exec>
		
        <exec executable="bash" 
            failonerror="true" resolveexecutable="true">
		   <arg value="-c" />	
		   <arg value="test/scripts/image-generation/verifyGimagesTestCase.sh" />	
        </exec>
    </target>
</project>
