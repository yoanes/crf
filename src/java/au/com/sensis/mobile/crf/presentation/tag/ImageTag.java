package au.com.sensis.mobile.crf.presentation.tag;import java.io.IOException;import javax.servlet.jsp.JspException;import javax.servlet.jsp.JspWriter;import javax.servlet.jsp.PageContext;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.support.WebApplicationContextUtils;import au.com.sensis.mobile.crf.service.MappedResourcePath;import au.com.sensis.mobile.crf.service.ResourceResolutionWarnLogger;import au.com.sensis.mobile.crf.service.ResourceSelector;import au.com.sensis.mobile.web.component.core.tag.DynamicTagAttribute;/** * Facade to an image tag that uses the Content Rendering Framework to * resolve the resource path set into {@link #setHref(String)}. * * @author Adrian.Koh2@sensis.com.au *///TODO: refactor so that href attribute is src.public class ImageTag extends AbstractResourceSelectorTag {    /**     * {@inheritDoc}     */    @Override    // TODO: validate that abstract path has correct extension.    public final void doTag() throws JspException, IOException {        validateHrefAttribute();        final MappedResourcePath mappedResourcePath =                getResourceSelector()                        .getResourcePathWithExtensions(getDevice(),                                getHref(),                                    new String[] { "*" });        if (mappedResourcePath.exists()) {            if (!mappedResourcePath.endsWithDotNull()) {                writeSingleImageTag(getJspContext().getOut(), mappedResourcePath);            }        } else {            if (getResourceResolutionWarnLogger().isWarnEnabled()) {                getResourceResolutionWarnLogger().warn(                        "No resource was found for requested resource '"                                + getHref() + "' and device " + getDevice());            }        }    }    private ResourceResolutionWarnLogger getResourceResolutionWarnLogger() {        return getImageTagCollaboratorsMemento()                .getResourceResolutionWarnLogger();    }    private void writeSingleImageTag(final JspWriter jspWriter,            final MappedResourcePath mappedResourcePath) throws IOException {        jspWriter.print("<img ");        jspWriter.print("src=\""                + getImageTagCollaboratorsMemento().getClientPathPrefix()                + mappedResourcePath.getNewResourcePath() + "\" ");         for (final DynamicTagAttribute attribute : getDynamicAttributes()) {            jspWriter.print(attribute.getLocalName() + "=\""                    + attribute.getValue() + "\" ");        }        jspWriter.print("/>\n");    }   private ImageTagCollaboratorsMemento getImageTagCollaboratorsMemento() {        final PageContext pc = (PageContext) getJspContext();        final WebApplicationContext webApplicationContext =                WebApplicationContextUtils.getRequiredWebApplicationContext(pc                        .getServletContext());        return (ImageTagCollaboratorsMemento) webApplicationContext                .getBean(ImageTagCollaboratorsMemento.BEAN_NAME);    }    /**     * @return the {@link ResourceSelector}.     */    private ResourceSelector getResourceSelector() {        return getImageTagCollaboratorsMemento()                .getResourceSelector();    }}